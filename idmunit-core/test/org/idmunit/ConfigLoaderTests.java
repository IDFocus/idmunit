package org.idmunit;

import java.util.Map;

import org.idmunit.connector.ConnectionConfigData;

import junit.framework.TestCase;

public class ConfigLoaderTests extends TestCase {
	public void testGetConfigData() throws IdMUnitException {
		Map<String, ConnectionConfigData> config = ConfigLoader.getConfigData("./examples/profiles/idmunit-config.xml", "IDMUNIT1");
		ConnectionConfigData meta = config.get("META");
		assertEquals("172.19.18.130", meta.getServerURL());
		assertEquals("cn=admin,o=services", meta.getAdminCtx());
		assertEquals("trivir", meta.getAdminPwd());
		assertEquals("", meta.getKeystorePath());

		assertEquals("META", meta.getName());
		assertEquals("org.idmunit.connector.LDAP", meta.getType());
		assertEquals("Connector for the identity vault", meta.getParam("description"));
		assertEquals("172.19.18.130", meta.getParam("server"));
		assertEquals("cn=admin,o=services", meta.getParam("user"));
		assertEquals("trivir", meta.getParam("password"));
		assertEquals("", meta.getParam("keystore-path"));
		assertEquals(0, meta.getMultiplierRetry());
		assertEquals(0, meta.getMultiplierWait());
		assertEquals(3, meta.getSubstitutions().size());
		assertEquals("ou=test", meta.getSubstitutions().get("%TEST1%"));
		assertEquals("o=users", meta.getSubstitutions().get("%TEST2%"));
		assertEquals("TestUser", meta.getSubstitutions().get("%TTT%"));
		assertEquals(3, meta.getDataInjections().size());
		assertEquals("%TODAY%", meta.getDataInjections().get(0).getKey());
		assertEquals("org.idmunit.injector.DateInjection", meta.getDataInjections().get(0).getType());
		assertEquals("yyyyMMdd", meta.getDataInjections().get(0).getFormat());
		assertEquals(null, meta.getDataInjections().get(0).getMutator());
		assertEquals("%TODAY+30%", meta.getDataInjections().get(1).getKey());
		assertEquals("org.idmunit.injector.DateInjection", meta.getDataInjections().get(1).getType());
		assertEquals("yyyyMMdd", meta.getDataInjections().get(1).getFormat());
		assertEquals("30", meta.getDataInjections().get(1).getMutator());
		assertEquals("%TODAY-30%", meta.getDataInjections().get(2).getKey());
		assertEquals("org.idmunit.injector.DateInjection", meta.getDataInjections().get(2).getType());
		assertEquals("yyyyMMdd", meta.getDataInjections().get(2).getFormat());
		assertEquals("-30", meta.getDataInjections().get(2).getMutator());
		assertEquals(1, meta.getIdmunitAlerts().size());
		assertEquals("TriVir", meta.getIdmunitAlerts().get("idmunitAlert_TriVir").getName());
		assertEquals("TriVir personnel will be notified if a test marked as \"Critical\" fails", meta.getIdmunitAlerts().get("idmunitAlert_TriVir").getDescription());
		assertEquals("smtp.MYSERVER.com", meta.getIdmunitAlerts().get("idmunitAlert_TriVir").getSmtpServer());
		assertEquals("idmunitAlerts@idmunit.org", meta.getIdmunitAlerts().get("idmunitAlert_TriVir").getAlertSender());
		assertEquals("bkynaston@trivir.com", meta.getIdmunitAlerts().get("idmunitAlert_TriVir").getAlertReipient());
		assertEquals("IdMUnit Test Failed: ", meta.getIdmunitAlerts().get("idmunitAlert_TriVir").getSubjectPrefix());
		assertEquals("c:/idmunitAlerts.log", meta.getIdmunitAlerts().get("idmunitAlert_TriVir").getLogPath());

		ConnectionConfigData ad1 = (ConnectionConfigData)config.get("AD1");
		assertEquals("AD1", ad1.getName());
		assertEquals("org.idmunit.connector.LDAP", ad1.getType());
		assertEquals("Connector to an Active Directory domain on Windows 2003 server", ad1.getParam("description"));
		assertEquals("172.19.18.131", ad1.getParam("server"));
		assertEquals("cn=administrator,cn=users,dc=trivir,dc=com", ad1.getParam("user"));
		assertEquals("trivir", ad1.getParam("password"));
		assertEquals("", ad1.getParam("keystore-path"));
		assertEquals(0, ad1.getMultiplierRetry());
		assertEquals(0, ad1.getMultiplierWait());
		assertEquals(1, ad1.getSubstitutions().size());
		assertEquals("simdev,DC=lcl", ad1.getSubstitutions().get("ADDOMAIN"));
		assertEquals(3, ad1.getDataInjections().size());
		assertEquals("%TODAY%", ad1.getDataInjections().get(0).getKey());
		assertEquals("org.idmunit.injector.DateInjection", ad1.getDataInjections().get(0).getType());
		assertEquals("yyyyMMdd", ad1.getDataInjections().get(0).getFormat());
		assertEquals(null, ad1.getDataInjections().get(0).getMutator());
		assertEquals("%TODAY+30%", ad1.getDataInjections().get(1).getKey());
		assertEquals("org.idmunit.injector.DateInjection", ad1.getDataInjections().get(1).getType());
		assertEquals("yyyyMMdd", ad1.getDataInjections().get(1).getFormat());
		assertEquals("30", ad1.getDataInjections().get(1).getMutator());
		assertEquals("%TODAY-30%", ad1.getDataInjections().get(2).getKey());
		assertEquals("org.idmunit.injector.DateInjection", ad1.getDataInjections().get(2).getType());
		assertEquals("yyyyMMdd", ad1.getDataInjections().get(2).getFormat());
		assertEquals("-30", ad1.getDataInjections().get(2).getMutator());
		assertEquals(1, ad1.getIdmunitAlerts().size());
		assertEquals("TriVir", ad1.getIdmunitAlerts().get("idmunitAlert_TriVir").getName());
		assertEquals("TriVir personnel will be notified if a test marked as \"Critical\" fails", ad1.getIdmunitAlerts().get("idmunitAlert_TriVir").getDescription());
		assertEquals("smtp.MYSERVER.com", ad1.getIdmunitAlerts().get("idmunitAlert_TriVir").getSmtpServer());
		assertEquals("idmunitAlerts@idmunit.org", ad1.getIdmunitAlerts().get("idmunitAlert_TriVir").getAlertSender());
		assertEquals("bkynaston@trivir.com", ad1.getIdmunitAlerts().get("idmunitAlert_TriVir").getAlertReipient());
		assertEquals("IdMUnit Test Failed: ", ad1.getIdmunitAlerts().get("idmunitAlert_TriVir").getSubjectPrefix());
		assertEquals("c:/idmunitAlerts.log", ad1.getIdmunitAlerts().get("idmunitAlert_TriVir").getLogPath());

		ConnectionConfigData orcl = (ConnectionConfigData)config.get("ORCL");
		assertEquals("ORCL", orcl.getName());
		assertEquals("com.trivir.idmunit.connector.Oracle", orcl.getType());
		assertEquals("Connector to an Remedy database on an Oracle server", orcl.getParam("description"));
		assertEquals("jdbc:oracle:thin:@192.168.1.119:1526:REMEDY01", orcl.getParam("server"));
		assertEquals("idmunit", orcl.getParam("user"));
		assertEquals("trivir", orcl.getParam("password"));
		assertEquals("", orcl.getParam("keystore-path"));
		assertEquals(0, orcl.getMultiplierRetry());
		assertEquals(0, orcl.getMultiplierWait());
		assertEquals(null, orcl.getSubstitutions());
		assertEquals(null, orcl.getDataInjections());
		assertEquals(1, orcl.getIdmunitAlerts().size());
		assertEquals("TriVir", orcl.getIdmunitAlerts().get("idmunitAlert_TriVir").getName());
		assertEquals("TriVir personnel will be notified if a test marked as \"Critical\" fails", orcl.getIdmunitAlerts().get("idmunitAlert_TriVir").getDescription());
		assertEquals("smtp.MYSERVER.com", orcl.getIdmunitAlerts().get("idmunitAlert_TriVir").getSmtpServer());
		assertEquals("idmunitAlerts@idmunit.org", orcl.getIdmunitAlerts().get("idmunitAlert_TriVir").getAlertSender());
		assertEquals("bkynaston@trivir.com", orcl.getIdmunitAlerts().get("idmunitAlert_TriVir").getAlertReipient());
		assertEquals("IdMUnit Test Failed: ", orcl.getIdmunitAlerts().get("idmunitAlert_TriVir").getSubjectPrefix());
		assertEquals("c:/idmunitAlerts.log", orcl.getIdmunitAlerts().get("idmunitAlert_TriVir").getLogPath());

		ConnectionConfigData dtf = (ConnectionConfigData)config.get("DTF");
		assertEquals("DTF", dtf.getName());
		assertEquals("org.idmunit.connector.DTF", dtf.getType());
		assertEquals("Connector to TriVirDTF data feed - must  map drive/share or UNC to IDM server or remote loader running the DTF driver", dtf.getParam("description"));
		assertEquals("DriverInputFilePath=x:/input/inputFile.csv|DriverOutputFilePath=x:/output/outputFile.csv|delimiter=$", dtf.getParam("server"));
		assertEquals("", dtf.getParam("user"));
		assertEquals("", dtf.getParam("password"));
		assertEquals("", dtf.getParam("keystore-path"));
		assertEquals(0, dtf.getMultiplierRetry());
		assertEquals(0, dtf.getMultiplierWait());
		assertEquals(3, dtf.getSubstitutions().size());
		assertEquals("333-333-3333", dtf.getSubstitutions().get("X3"));
		assertEquals("222-222-2222", dtf.getSubstitutions().get("X2"));
		assertEquals("111-111-1111", dtf.getSubstitutions().get("X1"));
		assertEquals(null, dtf.getDataInjections());
		assertEquals(1, dtf.getIdmunitAlerts().size());
		assertEquals("TriVir", dtf.getIdmunitAlerts().get("idmunitAlert_TriVir").getName());
		assertEquals("TriVir personnel will be notified if a test marked as \"Critical\" fails", dtf.getIdmunitAlerts().get("idmunitAlert_TriVir").getDescription());
		assertEquals("smtp.MYSERVER.com", dtf.getIdmunitAlerts().get("idmunitAlert_TriVir").getSmtpServer());
		assertEquals("idmunitAlerts@idmunit.org", dtf.getIdmunitAlerts().get("idmunitAlert_TriVir").getAlertSender());
		assertEquals("bkynaston@trivir.com", dtf.getIdmunitAlerts().get("idmunitAlert_TriVir").getAlertReipient());
		assertEquals("IdMUnit Test Failed: ", dtf.getIdmunitAlerts().get("idmunitAlert_TriVir").getSubjectPrefix());
		assertEquals("c:/idmunitAlerts.log", dtf.getIdmunitAlerts().get("idmunitAlert_TriVir").getLogPath());
	}
}
